constsy : const
intsy : int
ident : cona
becomes : =
intcon : 1
comma : ,
ident : conb
becomes : =
intcon : 2
semicolon : ;
constsy : const
intsy : int
ident : conc
becomes : =
intcon : 3
comma : ,
ident : cong
becomes : =
intcon : 4
semicolon : ;
constsy : const
intsy : int
ident : conh
becomes : =
intcon : 5
comma : ,
ident : coni
becomes : =
intcon : 6
comma : ,
ident : conj
becomes : =
intcon : 7
semicolon : ;
intsy : int
ident : a
lbrack : [
intcon : 10
rbrack : ]
semicolon : ;
intsy : int
ident : c
semicolon : ;
voidsy : void
ident : emptyfunc
lparent : (
rparent : )
lbrace : {
rbrace : }
voidsy : void
ident : emptyfunc2
lparent : (
rparent : )
lbrace : {
semicolon : ;
rbrace : }
charsy : char
ident : testchar
lparent : (
rparent : )
lbrace : {
returnsy : return
lparent : (
charcon : 0
rparent : )
semicolon : ;
rbrace : }
intsy : int
ident : fibonacci
lparent : (
intsy : int
ident : n
rparent : )
lbrace : {
constsy : const
intsy : int
ident : cona
becomes : =
sub : -
intcon : 1
semicolon : ;
charsy : char
ident : testc
semicolon : ;
ifsy : if
lparent : (
ident : n
eql : ==
intcon : 1
rparent : )
returnsy : return
lparent : (
intcon : 1
rparent : )
semicolon : ;
ifsy : if
lparent : (
ident : n
neq : !=
intcon : 2
rparent : )
returnsy : return
lparent : (
add : +
ident : fibonacci
lparent : (
ident : n
add : +
sub : -
intcon : 1
rparent : )
add : +
ident : fibonacci
lparent : (
ident : n
sub : -
intcon : 2
rparent : )
add : +
intcon : 0
rparent : )
semicolon : ;
returnsy : return
lparent : (
intcon : 1
rparent : )
semicolon : ;
rbrace : }
voidsy : void
ident : move
lparent : (
charsy : char
ident : a
comma : ,
charsy : char
ident : b
rparent : )
lbrace : {
constsy : const
intsy : int
ident : testcon1
becomes : =
intcon : 1
semicolon : ;
constsy : const
charsy : char
ident : testcon2
becomes : =
charcon : 1
semicolon : ;
printfsy : printf
lparent : (
charcon : M
rparent : )
semicolon : ;
printfsy : printf
lparent : (
stringcon : OVE 
rparent : )
semicolon : ;
printfsy : printf
lparent : (
ident : a
rparent : )
semicolon : ;
printfsy : printf
lparent : (
stringcon :  TO 
comma : ,
ident : b
rparent : )
semicolon : ;
printfsy : printf
lparent : (
stringcon :  
rparent : )
semicolon : ;
rbrace : }
voidsy : void
ident : hanoi
lparent : (
intsy : int
ident : han
comma : ,
charsy : char
ident : l
comma : ,
charsy : char
ident : m
comma : ,
charsy : char
ident : r
rparent : )
lbrace : {
ifsy : if
lparent : (
intcon : 2
gt : >
ident : han
rparent : )
lbrace : {
ident : move
lparent : (
ident : l
comma : ,
ident : r
rparent : )
semicolon : ;
returnsy : return
semicolon : ;
printfsy : printf
lparent : (
stringcon : RETURN ERROR
rparent : )
semicolon : ;
rbrace : }
ident : hanoi
lparent : (
ident : han
sub : -
intcon : 1
comma : ,
ident : l
comma : ,
ident : r
comma : ,
ident : m
rparent : )
semicolon : ;
ident : move
lparent : (
ident : l
comma : ,
ident : r
rparent : )
semicolon : ;
ident : hanoi
lparent : (
ident : han
sub : -
intcon : 1
comma : ,
ident : m
comma : ,
ident : l
comma : ,
ident : r
rparent : )
semicolon : ;
rbrace : }
intsy : int
ident : getpower
lparent : (
intsy : int
ident : n
comma : ,
intsy : int
ident : le
rparent : )
lbrace : {
intsy : int
ident : move
semicolon : ;
ifsy : if
lparent : (
ident : le
gte : >=
intcon : 2
rparent : )
lbrace : {
ident : move
becomes : =
ident : getpower
lparent : (
ident : n
comma : ,
ident : le
sub : -
intcon : 1
rparent : )
semicolon : ;
ident : a
lbrack : [
ident : le
sub : -
intcon : 1
rbrack : ]
becomes : =
ident : move
semicolon : ;
returnsy : return
lparent : (
ident : n
mul : *
ident : move
rparent : )
semicolon : ;
rbrace : }
ifsy : if
lparent : (
intcon : 1
lte : <=
ident : le
rparent : )
lbrace : {
ident : a
lbrack : [
ident : le
sub : -
intcon : 1
rbrack : ]
becomes : =
ident : n
semicolon : ;
returnsy : return
lparent : (
ident : n
rparent : )
semicolon : ;
rbrace : }
returnsy : return
lparent : (
intcon : 1
rparent : )
semicolon : ;
rbrace : }
intsy : int
ident : getsqr
lparent : (
intsy : int
ident : n
rparent : )
lbrace : {
intsy : int
ident : _i
semicolon : ;
ident : _i
becomes : =
intcon : 1
semicolon : ;
whilesy : while
lparent : (
ident : _i
lt : <
ident : n
divi : /
ident : _i
rparent : )
ident : _i
becomes : =
add : +
intcon : 1
add : +
ident : _i
semicolon : ;
ifsy : if
lparent : (
sub : -
ident : n
add : +
ident : _i
mul : *
ident : _i
lt : <
ident : n
sub : -
lparent : (
sub : -
intcon : 1
add : +
ident : _i
rparent : )
mul : *
lparent : (
ident : _i
sub : -
intcon : 1
rparent : )
rparent : )
returnsy : return
lparent : (
ident : _i
rparent : )
semicolon : ;
returnsy : return
lparent : (
ident : _i
sub : -
intcon : 1
rparent : )
semicolon : ;
rbrace : }
voidsy : void
mainsy : main
lparent : (
rparent : )
lbrace : {
constsy : const
charsy : char
ident : cond
becomes : =
charcon : A
comma : ,
ident : cone
becomes : =
charcon : B
comma : ,
ident : conf
becomes : =
charcon : C
semicolon : ;
constsy : const
charsy : char
ident : con1
becomes : =
charcon : +
comma : ,
ident : con2
becomes : =
charcon : -
semicolon : ;
constsy : const
charsy : char
ident : con3
becomes : =
charcon : *
semicolon : ;
constsy : const
intsy : int
ident : testcon
becomes : =
intcon : 100
semicolon : ;
intsy : int
ident : c
semicolon : ;
intsy : int
ident : num
comma : ,
ident : i
semicolon : ;
intsy : int
ident : fib
comma : ,
ident : testaj
lbrack : [
intcon : 10
rbrack : ]
comma : ,
ident : sqr
semicolon : ;
intsy : int
ident : testai
lbrack : [
intcon : 100
rbrack : ]
comma : ,
ident : a_
comma : ,
ident : a_a
comma : ,
ident : a0
comma : ,
ident : a00
semicolon : ;
intsy : int
ident : testai1
comma : ,
ident : testai2
comma : ,
ident : testai3
comma : ,
ident : testai4
comma : ,
ident : testai5
comma : ,
ident : testai6
semicolon : ;
charsy : char
ident : c1
semicolon : ;
charsy : char
ident : c2
comma : ,
ident : c3
semicolon : ;
charsy : char
ident : c4
comma : ,
ident : c5
comma : ,
ident : c6
semicolon : ;
ident : a_a
becomes : =
intcon : 123456789
semicolon : ;
ident : a_
becomes : =
ident : cond
semicolon : ;
ident : testai
lbrack : [
intcon : 0
rbrack : ]
becomes : =
add : +
intcon : 5
semicolon : ;
ident : testai
lbrack : [
ident : testai
lbrack : [
intcon : 0
rbrack : ]
rbrack : ]
becomes : =
intcon : 1
semicolon : ;
ident : testai
lbrack : [
ident : con1
rbrack : ]
becomes : =
intcon : 2
semicolon : ;
scanfsy : scanf
lparent : (
ident : c
comma : ,
ident : num
rparent : )
semicolon : ;
switchsy : switch
lparent : (
ident : c
rparent : )
lbrace : {
casesy : case
intcon : 1
colon : :
lbrace : {
ident : getpower
lparent : (
ident : num
comma : ,
intcon : 10
rparent : )
semicolon : ;
ident : i
becomes : =
intcon : 0
semicolon : ;
whilesy : while
lparent : (
ident : i
lt : <
intcon : 10
rparent : )
lbrace : {
printfsy : printf
lparent : (
stringcon : NO
comma : ,
ident : i
add : +
intcon : 1
rparent : )
semicolon : ;
printfsy : printf
lparent : (
stringcon : :
comma : ,
ident : a
lbrack : [
ident : i
rbrack : ]
rparent : )
semicolon : ;
printfsy : printf
lparent : (
stringcon :  
rparent : )
semicolon : ;
printfsy : printf
lparent : (
stringcon : 
rparent : )
semicolon : ;
ifsy : if
lparent : (
intcon : 1
rparent : )
lbrace : {
ident : i
becomes : =
ident : i
add : +
intcon : 1
semicolon : ;
rbrace : }
rbrace : }
rbrace : }
rbrace : }
switchsy : switch
lparent : (
ident : c
rparent : )
lbrace : {
casesy : case
add : +
intcon : 2
colon : :
ident : hanoi
lparent : (
ident : num
comma : ,
ident : cond
comma : ,
ident : cone
comma : ,
ident : conf
rparent : )
semicolon : ;
casesy : case
intcon : 3
colon : :
lbrace : {
ident : fib
becomes : =
ident : fibonacci
lparent : (
ident : num
rparent : )
semicolon : ;
printfsy : printf
lparent : (
ident : fib
rparent : )
semicolon : ;
rbrace : }
rbrace : }
switchsy : switch
lparent : (
ident : c
rparent : )
lbrace : {
casesy : case
intcon : 4
colon : :
lbrace : {
ident : sqr
becomes : =
ident : getsqr
lparent : (
ident : num
rparent : )
semicolon : ;
printfsy : printf
lparent : (
ident : sqr
rparent : )
semicolon : ;
rbrace : }
casesy : case
intcon : 5
colon : :
lbrace : {
printfsy : printf
lparent : (
ident : testchar
lparent : (
rparent : )
rparent : )
semicolon : ;
printfsy : printf
lparent : (
intcon : 3
mul : *
intcon : 2
divi : /
intcon : 6
mul : *
ident : testai
lbrack : [
intcon : 0
rbrack : ]
rparent : )
semicolon : ;
rbrace : }
casesy : case
intcon : 6
colon : :
lbrace : {
ifsy : if
lparent : (
ident : testai
lbrack : [
intcon : 0
rbrack : ]
rparent : )
lbrace : {
printfsy : printf
lparent : (
stringcon : IFCORRECT
rparent : )
semicolon : ;
rbrace : }
whilesy : while
lparent : (
ident : testai
lbrack : [
intcon : 0
rbrack : ]
rparent : )
lbrace : {
printfsy : printf
lparent : (
ident : testai
lbrack : [
intcon : 0
rbrack : ]
rparent : )
semicolon : ;
ident : testai
lbrack : [
intcon : 0
rbrack : ]
becomes : =
ident : testai
lbrack : [
intcon : 0
rbrack : ]
sub : -
intcon : 1
semicolon : ;
rbrace : }
rbrace : }
casesy : case
sub : -
intcon : 7
colon : :
lbrace : {
scanfsy : scanf
lparent : (
ident : testai1
rparent : )
semicolon : ;
scanfsy : scanf
lparent : (
ident : testai2
comma : ,
ident : testai3
rparent : )
semicolon : ;
scanfsy : scanf
lparent : (
ident : testai4
comma : ,
ident : testai5
comma : ,
ident : testai6
rparent : )
semicolon : ;
printfsy : printf
lparent : (
ident : testai1
rparent : )
semicolon : ;
printfsy : printf
lparent : (
ident : testai2
rparent : )
semicolon : ;
printfsy : printf
lparent : (
ident : testai3
rparent : )
semicolon : ;
printfsy : printf
lparent : (
ident : testai4
rparent : )
semicolon : ;
printfsy : printf
lparent : (
ident : testai5
rparent : )
semicolon : ;
printfsy : printf
lparent : (
ident : testai6
rparent : )
semicolon : ;
rbrace : }
casesy : case
intcon : 0
colon : :
lbrace : {
scanfsy : scanf
lparent : (
ident : c1
rparent : )
semicolon : ;
switchsy : switch
lparent : (
ident : c1
rparent : )
lbrace : {
casesy : case
charcon : a
colon : :
printfsy : printf
lparent : (
intcon : 1
rparent : )
semicolon : ;
casesy : case
charcon : b
colon : :
printfsy : printf
lparent : (
intcon : 2
rparent : )
semicolon : ;
defaultsy : default
colon : :
printfsy : printf
lparent : (
stringcon : >=
comma : ,
intcon : 3
rparent : )
semicolon : ;
rbrace : }
rbrace : }
defaultsy : default
colon : :
printfsy : printf
lparent : (
stringcon : ERROR
rparent : )
semicolon : ;
rbrace : }
returnsy : return
semicolon : ;
rbrace : }
