intsy : int
ident : num
lbrack : [
intcon : 100
rbrack : ]
semicolon : ;
intsy : int
ident : getpower
lparent : (
intsy : int
ident : a
comma : ,
intsy : int
ident : n
rparent : )
lbrace : {
ifsy : if
lparent : (
ident : n
gte : >=
intcon : 1
rparent : )
lbrace : {
ident : num
lbrack : [
ident : n
sub : -
intcon : 1
rbrack : ]
becomes : =
ident : getpower
lparent : (
ident : a
comma : ,
ident : n
sub : -
intcon : 1
rparent : )
semicolon : ;
returnsy : return
lparent : (
ident : a
mul : *
ident : num
lbrack : [
ident : n
sub : -
intcon : 1
rbrack : ]
rparent : )
semicolon : ;
rbrace : }
elsesy : else
lbrace : {
ident : n
becomes : =
intcon : 1
semicolon : ;
returnsy : return
lparent : (
ident : n
rparent : )
semicolon : ;
rbrace : }
rbrace : }
voidsy : void
mainsy : main
lparent : (
rparent : )
lbrace : {
constsy : const
intsy : int
ident : a
becomes : =
intcon : 10
semicolon : ;
intsy : int
ident : m
comma : ,
ident : n
semicolon : ;
intsy : int
ident : i
semicolon : ;
scanfsy : scanf
lparent : (
ident : m
comma : ,
ident : n
rparent : )
semicolon : ;
printfsy : printf
lparent : (
stringcon : \n ch = 
comma : ,
intcon : 10
rparent : )
semicolon : ;
ident : num
lbrack : [
ident : n
rbrack : ]
becomes : =
ident : getpower
lparent : (
intcon : 3
comma : ,
intcon : 10
rparent : )
semicolon : ;
ident : i
becomes : =
intcon : 0
semicolon : ;
whilesy : while
lparent : (
ident : i
lte : <=
ident : n
rparent : )
lbrace : {
printfsy : printf
lparent : (
stringcon : \nnum[
comma : ,
ident : i
rparent : )
semicolon : ;
printfsy : printf
lparent : (
stringcon : ] = 
comma : ,
ident : num
lbrack : [
ident : i
rbrack : ]
rparent : )
semicolon : ;
ident : i
becomes : =
ident : i
add : +
intcon : 1
semicolon : ;
rbrace : }
printfsy : printf
lparent : (
stringcon : \n---larr test!---\n
rparent : )
semicolon : ;
ident : i
becomes : =
intcon : 9
semicolon : ;
printfsy : printf
lparent : (
stringcon : \nnum[i] = 
comma : ,
ident : num
lbrack : [
ident : i
rbrack : ]
rparent : )
semicolon : ;
printfsy : printf
lparent : (
stringcon : \nnum[i + 1] = 
comma : ,
ident : num
lbrack : [
ident : i
add : +
intcon : 1
rbrack : ]
rparent : )
semicolon : ;
printfsy : printf
lparent : (
stringcon : \nnum[a] = 
comma : ,
ident : num
lbrack : [
ident : a
rbrack : ]
rparent : )
semicolon : ;
printfsy : printf
lparent : (
stringcon : \nnum[10] = 
comma : ,
ident : num
lbrack : [
intcon : 10
rbrack : ]
rparent : )
semicolon : ;
printfsy : printf
lparent : (
stringcon : \n---sarr test!---\n
rparent : )
semicolon : ;
ident : num
lbrack : [
intcon : 11
rbrack : ]
becomes : =
intcon : 1
semicolon : ;
ident : num
lbrack : [
intcon : 12
rbrack : ]
becomes : =
ident : i
add : +
intcon : 1
semicolon : ;
ident : num
lbrack : [
intcon : 13
rbrack : ]
becomes : =
ident : i
semicolon : ;
printfsy : printf
lparent : (
stringcon : \nnum[11] = 
comma : ,
ident : num
lbrack : [
intcon : 11
rbrack : ]
rparent : )
semicolon : ;
printfsy : printf
lparent : (
stringcon : \nnum[12] = 
comma : ,
ident : num
lbrack : [
intcon : 12
rbrack : ]
rparent : )
semicolon : ;
printfsy : printf
lparent : (
stringcon : \nnum[13] = 
comma : ,
ident : num
lbrack : [
intcon : 13
rbrack : ]
rparent : )
semicolon : ;
ident : num
lbrack : [
ident : i
rbrack : ]
becomes : =
intcon : 1
semicolon : ;
printfsy : printf
lparent : (
stringcon : \nnum[i] = 
comma : ,
ident : num
lbrack : [
ident : i
rbrack : ]
rparent : )
semicolon : ;
ident : num
lbrack : [
ident : i
rbrack : ]
becomes : =
ident : i
add : +
intcon : 1
semicolon : ;
printfsy : printf
lparent : (
stringcon : \nnum[i] = 
comma : ,
ident : num
lbrack : [
ident : i
rbrack : ]
rparent : )
semicolon : ;
ident : num
lbrack : [
ident : i
rbrack : ]
becomes : =
ident : i
semicolon : ;
printfsy : printf
lparent : (
stringcon : \nnum[i] = 
comma : ,
ident : num
lbrack : [
ident : i
rbrack : ]
rparent : )
semicolon : ;
ident : num
lbrack : [
ident : i
add : +
intcon : 1
rbrack : ]
becomes : =
intcon : 1
semicolon : ;
ident : num
lbrack : [
ident : i
add : +
intcon : 2
rbrack : ]
becomes : =
ident : i
add : +
intcon : 1
semicolon : ;
ident : num
lbrack : [
ident : i
add : +
intcon : 3
rbrack : ]
becomes : =
ident : i
semicolon : ;
printfsy : printf
lparent : (
stringcon : \nnum[i+1] = 
comma : ,
ident : num
lbrack : [
ident : i
add : +
intcon : 1
rbrack : ]
rparent : )
semicolon : ;
printfsy : printf
lparent : (
stringcon : \nnum[i+2] = 
comma : ,
ident : num
lbrack : [
ident : i
add : +
intcon : 2
rbrack : ]
rparent : )
semicolon : ;
printfsy : printf
lparent : (
stringcon : \nnum[i+3] = 
comma : ,
ident : num
lbrack : [
ident : i
add : +
intcon : 3
rbrack : ]
rparent : )
semicolon : ;
rbrace : }
