constsy : const
intsy : int
ident : a
becomes : =
intcon : 0
semicolon : ;
constsy : const
intsy : int
ident : b
becomes : =
add : +
intcon : 10
comma : ,
ident : c
becomes : =
sub : -
intcon : 20
semicolon : ;
constsy : const
charsy : char
ident : d
becomes : =
charcon : _
comma : ,
ident : e
becomes : =
charcon : *
semicolon : ;
constsy : const
charsy : char
ident : b11
becomes : =
charcon : +
semicolon : ;
constsy : const
intsy : int
ident : a11
becomes : =
intcon : 0
semicolon : ;
constsy : const
intsy : int
ident : a12
becomes : =
add : +
intcon : 10
comma : ,
ident : a13
becomes : =
sub : -
intcon : 20
comma : ,
ident : a14
becomes : =
intcon : 123456789
semicolon : ;
constsy : const
charsy : char
ident : b12
becomes : =
charcon : /
comma : ,
ident : b13
becomes : =
charcon : _
comma : ,
ident : b14
becomes : =
charcon : K
semicolon : ;
intsy : int
ident : x
comma : ,
ident : y
comma : ,
ident : t
lbrack : [
intcon : 10
rbrack : ]
semicolon : ;
charsy : char
ident : z
comma : ,
ident : s
lbrack : [
intcon : 1
rbrack : ]
semicolon : ;
intsy : int
ident : x11
semicolon : ;
intsy : int
ident : x12
comma : ,
ident : n2
lbrack : [
intcon : 10
rbrack : ]
comma : ,
ident : z11
semicolon : ;
charsy : char
ident : ch11
semicolon : ;
charsy : char
ident : ch12
comma : ,
ident : ch13
comma : ,
ident : s2
lbrack : [
intcon : 1
rbrack : ]
comma : ,
ident : t2
lbrack : [
intcon : 3
rbrack : ]
semicolon : ;
intsy : int
ident : func1
lparent : (
intsy : int
ident : func1
rparent : )
lbrace : {
ident : x
becomes : =
add : +
sub : -
intcon : 10
add : +
sub : -
intcon : 10
add : +
sub : -
intcon : 10
semicolon : ;
ident : y
becomes : =
ident : func1
semicolon : ;
returnsy : return
lparent : (
ident : x
add : +
ident : y
rparent : )
semicolon : ;
rbrace : }
charsy : char
ident : func2
lparent : (
intsy : int
ident : t1
comma : ,
intsy : int
ident : t2
rparent : )
lbrace : {
intsy : int
ident : x
comma : ,
ident : y
semicolon : ;
ident : x
becomes : =
ident : func1
lparent : (
ident : t1
rparent : )
semicolon : ;
ident : y
becomes : =
ident : func1
lparent : (
ident : t2
rparent : )
semicolon : ;
returnsy : return
lparent : (
ident : x
add : +
ident : y
rparent : )
semicolon : ;
rbrace : }
voidsy : void
ident : func3
lparent : (
charsy : char
ident : s
rparent : )
lbrace : {
semicolon : ;
rbrace : }
voidsy : void
ident : test1func4
lparent : (
rparent : )
lbrace : {
intsy : int
ident : num
semicolon : ;
charsy : char
ident : ch
semicolon : ;
ident : ch
becomes : =
ident : d
add : +
ident : b
semicolon : ;
ident : num
becomes : =
ident : b
add : +
ident : c
add : +
ident : func1
lparent : (
intcon : 10
rparent : )
semicolon : ;
printfsy : printf
lparent : (
stringcon : ch = 
comma : ,
ident : ch
rparent : )
semicolon : ;
printfsy : printf
lparent : (
stringcon : \n
rparent : )
semicolon : ;
printfsy : printf
lparent : (
stringcon : num = 
comma : ,
ident : num
rparent : )
semicolon : ;
printfsy : printf
lparent : (
stringcon : \n
rparent : )
semicolon : ;
printfsy : printf
lparent : (
stringcon : Func2(50,70) = 
comma : ,
ident : func2
lparent : (
intcon : 50
comma : ,
intcon : 70
rparent : )
rparent : )
semicolon : ;
printfsy : printf
lparent : (
stringcon : \n
rparent : )
semicolon : ;
printfsy : printf
lparent : (
stringcon : x = 
comma : ,
ident : x
rparent : )
semicolon : ;
printfsy : printf
lparent : (
stringcon : \n
rparent : )
semicolon : ;
printfsy : printf
lparent : (
stringcon : y = 
comma : ,
ident : y
rparent : )
semicolon : ;
printfsy : printf
lparent : (
stringcon : \n
rparent : )
semicolon : ;
rbrace : }
charsy : char
ident : test2func1
lparent : (
rparent : )
lbrace : {
semicolon : ;
returnsy : return
lparent : (
intcon : 0
rparent : )
semicolon : ;
rbrace : }
intsy : int
ident : test2func2
lparent : (
charsy : char
ident : ch11
rparent : )
lbrace : {
constsy : const
charsy : char
ident : f2_b11
becomes : =
charcon : +
semicolon : ;
constsy : const
intsy : int
ident : f2_a11
becomes : =
intcon : 0
semicolon : ;
constsy : const
intsy : int
ident : f2_a12
becomes : =
add : +
intcon : 10
comma : ,
ident : f2_a13
becomes : =
sub : -
intcon : 20
comma : ,
ident : f2_a14
becomes : =
intcon : 123456789
semicolon : ;
constsy : const
charsy : char
ident : f2_b12
becomes : =
charcon : /
comma : ,
ident : f2_b13
becomes : =
charcon : _
comma : ,
ident : f2_b14
becomes : =
charcon : K
semicolon : ;
intsy : int
ident : f2_x11
semicolon : ;
intsy : int
ident : f2_x12
comma : ,
ident : f2_n2
lbrack : [
intcon : 10
rbrack : ]
comma : ,
ident : f2_z11
semicolon : ;
charsy : char
ident : f2_ch11
semicolon : ;
charsy : char
ident : f2_ch12
comma : ,
ident : f2_ch13
comma : ,
ident : f2_s2
lbrack : [
intcon : 1
rbrack : ]
comma : ,
ident : f2_t2
lbrack : [
intcon : 3
rbrack : ]
semicolon : ;
returnsy : return
lparent : (
ident : ch11
add : +
ident : f2_a12
sub : -
ident : f2_a13
mul : *
ident : f2_b12
add : +
ident : f2_b13
sub : -
ident : f2_b14
rparent : )
semicolon : ;
rbrace : }
voidsy : void
ident : _test2func3
lparent : (
intsy : int
ident : num
comma : ,
charsy : char
ident : ch
rparent : )
lbrace : {
rbrace : }
voidsy : void
ident : test3func1
lparent : (
intsy : int
ident : num
rparent : )
lbrace : {
printfsy : printf
lparent : (
stringcon : num = 
comma : ,
ident : num
rparent : )
semicolon : ;
printfsy : printf
lparent : (
stringcon : \n
rparent : )
semicolon : ;
ifsy : if
lparent : (
ident : num
gt : >
intcon : 0
rparent : )
lbrace : {
ident : test3func1
lparent : (
ident : num
sub : -
intcon : 1
rparent : )
semicolon : ;
rbrace : }
rbrace : }
intsy : int
ident : test3func2
lparent : (
intsy : int
ident : num
comma : ,
charsy : char
ident : ch
rparent : )
lbrace : {
ifsy : if
lparent : (
ident : ch
eql : ==
intcon : 0
rparent : )
lbrace : {
ident : ch
becomes : =
charcon : a
semicolon : ;
rbrace : }
returnsy : return
lparent : (
ident : num
add : +
ident : ch
mul : *
ident : ch
add : +
ident : num
divi : /
ident : ch
add : +
ident : ch
sub : -
ident : num
rparent : )
semicolon : ;
rbrace : }
intsy : int
ident : test3func3
lparent : (
rparent : )
lbrace : {
constsy : const
intsy : int
ident : f2_a
becomes : =
intcon : 10
semicolon : ;
constsy : const
charsy : char
ident : f2_c
becomes : =
charcon : a
semicolon : ;
intsy : int
ident : f2_x
comma : ,
ident : f2_y
comma : ,
ident : f2_n
lbrack : [
intcon : 3
rbrack : ]
semicolon : ;
charsy : char
ident : f2_ch
semicolon : ;
ident : f2_x
becomes : =
add : +
sub : -
intcon : 10
semicolon : ;
printfsy : printf
lparent : (
stringcon : f2_x = 
comma : ,
ident : f2_x
rparent : )
semicolon : ;
printfsy : printf
lparent : (
stringcon : \n
rparent : )
semicolon : ;
ident : f2_x
becomes : =
sub : -
sub : -
intcon : 10
add : +
add : +
intcon : 20
semicolon : ;
printfsy : printf
lparent : (
stringcon : f2_x = 
comma : ,
ident : f2_x
rparent : )
semicolon : ;
printfsy : printf
lparent : (
stringcon : \n
rparent : )
semicolon : ;
ident : f2_y
becomes : =
sub : -
ident : f2_x
mul : *
ident : f2_x
add : +
intcon : 10
semicolon : ;
printfsy : printf
lparent : (
stringcon : f2_y = 
comma : ,
ident : f2_y
rparent : )
semicolon : ;
printfsy : printf
lparent : (
stringcon : \n
rparent : )
semicolon : ;
ident : f2_n
lbrack : [
intcon : 0
rbrack : ]
becomes : =
sub : -
ident : f2_x
semicolon : ;
ident : f2_n
lbrack : [
intcon : 1
rbrack : ]
becomes : =
ident : f2_y
semicolon : ;
printfsy : printf
lparent : (
stringcon : f2_n[0] = 
comma : ,
ident : f2_n
lbrack : [
intcon : 0
rbrack : ]
rparent : )
semicolon : ;
printfsy : printf
lparent : (
stringcon : \n
rparent : )
semicolon : ;
printfsy : printf
lparent : (
stringcon : f2_n[1] = 
comma : ,
ident : f2_n
lbrack : [
intcon : 1
rbrack : ]
rparent : )
semicolon : ;
printfsy : printf
lparent : (
stringcon : \n
rparent : )
semicolon : ;
ident : f2_ch
becomes : =
charcon : m
semicolon : ;
printfsy : printf
lparent : (
stringcon : f2_ch = 
comma : ,
ident : f2_ch
rparent : )
semicolon : ;
printfsy : printf
lparent : (
stringcon : \n
rparent : )
semicolon : ;
ident : f2_y
becomes : =
sub : -
lparent : (
ident : f2_x
add : +
ident : f2_x
rparent : )
mul : *
ident : f2_y
add : +
ident : f2_c
sub : -
ident : f2_n
lbrack : [
intcon : 0
rbrack : ]
add : +
ident : test3func2
lparent : (
ident : f2_a
comma : ,
ident : f2_c
rparent : )
semicolon : ;
printfsy : printf
lparent : (
stringcon : f2_y = 
comma : ,
ident : f2_y
rparent : )
semicolon : ;
printfsy : printf
lparent : (
stringcon : \n
rparent : )
semicolon : ;
returnsy : return
lparent : (
ident : f2_y
rparent : )
semicolon : ;
rbrace : }
voidsy : void
ident : test4func1
lparent : (
rparent : )
lbrace : {
charsy : char
ident : f1_ch
semicolon : ;
intsy : int
ident : f1_x
comma : ,
ident : f1_y
semicolon : ;
scanfsy : scanf
lparent : (
ident : f1_ch
rparent : )
semicolon : ;
scanfsy : scanf
lparent : (
ident : f1_x
comma : ,
ident : f1_y
rparent : )
semicolon : ;
ifsy : if
lparent : (
ident : f1_ch
gt : >
charcon : a
rparent : )
lbrace : {
printfsy : printf
lparent : (
stringcon : f1_ch > a
rparent : )
semicolon : ;
rbrace : }
ifsy : if
lparent : (
ident : f1_x
add : +
ident : f1_y
lte : <=
intcon : 0
rparent : )
lbrace : {
printfsy : printf
lparent : (
stringcon : f1_x + f1_y <= 0
rparent : )
semicolon : ;
rbrace : }
elsesy : else
lbrace : {
printfsy : printf
lparent : (
stringcon : f1_x + f1_y > 0
rparent : )
semicolon : ;
rbrace : }
ifsy : if
lparent : (
ident : f1_x
rparent : )
lbrace : {
printfsy : printf
lparent : (
stringcon : f1_x != 0
rparent : )
semicolon : ;
rbrace : }
ifsy : if
lparent : (
ident : f1_y
rparent : )
lbrace : {
printfsy : printf
lparent : (
stringcon : f1_y != 0
rparent : )
semicolon : ;
rbrace : }
elsesy : else
lbrace : {
printfsy : printf
lparent : (
stringcon : f1_y == 0
rparent : )
semicolon : ;
rbrace : }
printfsy : printf
lparent : (
stringcon : \n
rparent : )
semicolon : ;
rbrace : }
intsy : int
ident : test4func2
lparent : (
rparent : )
lbrace : {
intsy : int
ident : f2_x
semicolon : ;
ident : f2_x
becomes : =
intcon : 5
semicolon : ;
whilesy : while
lparent : (
ident : f2_x
gt : >
intcon : 0
rparent : )
lbrace : {
printfsy : printf
lparent : (
stringcon : f2_x = 
comma : ,
ident : f2_x
rparent : )
semicolon : ;
printfsy : printf
lparent : (
stringcon : \n
rparent : )
semicolon : ;
ident : f2_x
becomes : =
ident : f2_x
sub : -
intcon : 1
semicolon : ;
rbrace : }
whilesy : while
lparent : (
intcon : 1
rparent : )
lbrace : {
ident : f2_x
becomes : =
ident : f2_x
add : +
intcon : 1
semicolon : ;
printfsy : printf
lparent : (
stringcon : f2_x = 
comma : ,
ident : f2_x
rparent : )
semicolon : ;
printfsy : printf
lparent : (
stringcon : \n
rparent : )
semicolon : ;
ifsy : if
lparent : (
ident : f2_x
eql : ==
intcon : 2
rparent : )
lbrace : {
returnsy : return
lparent : (
intcon : 0
rparent : )
semicolon : ;
rbrace : }
rbrace : }
returnsy : return
lparent : (
intcon : 1
rparent : )
semicolon : ;
rbrace : }
intsy : int
ident : test5func1
lparent : (
intsy : int
ident : num
rparent : )
lbrace : {
switchsy : switch
lparent : (
ident : num
add : +
ident : num
rparent : )
lbrace : {
casesy : case
intcon : 0
colon : :
printfsy : printf
lparent : (
stringcon : \nnum + num = 0\n
rparent : )
semicolon : ;
defaultsy : default
colon : :
printfsy : printf
lparent : (
stringcon : \nTestDefault!\n
rparent : )
semicolon : ;
rbrace : }
switchsy : switch
lparent : (
ident : num
sub : -
ident : num
add : +
charcon : a
rparent : )
lbrace : {
casesy : case
charcon : a
colon : :
printfsy : printf
lparent : (
stringcon : \nThis is a!\n
rparent : )
semicolon : ;
rbrace : }
switchsy : switch
lparent : (
ident : num
rparent : )
lbrace : {
casesy : case
intcon : 1
colon : :
returnsy : return
lparent : (
intcon : 1
add : +
intcon : 1
rparent : )
semicolon : ;
casesy : case
intcon : 2
colon : :
returnsy : return
lparent : (
intcon : 2
mul : *
intcon : 2
rparent : )
semicolon : ;
rbrace : }
returnsy : return
lparent : (
ident : num
mul : *
ident : num
mul : *
ident : num
mul : *
ident : num
rparent : )
semicolon : ;
rbrace : }
voidsy : void
ident : test5func2
lparent : (
rparent : )
lbrace : {
printfsy : printf
lparent : (
stringcon : \nFunc without value called!\n
rparent : )
semicolon : ;
rbrace : }
voidsy : void
ident : test5func3
lparent : (
rparent : )
lbrace : {
intsy : int
ident : f2_x
semicolon : ;
ident : f2_x
becomes : =
ident : test5func1
lparent : (
intcon : 3
rparent : )
semicolon : ;
ident : test5func1
lparent : (
intcon : 1
rparent : )
semicolon : ;
ifsy : if
lparent : (
ident : f2_x
eql : ==
intcon : 81
rparent : )
lbrace : {
printfsy : printf
lparent : (
stringcon : \nFunc with value called!\n
rparent : )
semicolon : ;
rbrace : }
ident : test5func2
lparent : (
rparent : )
semicolon : ;
rbrace : }
voidsy : void
mainsy : main
lparent : (
rparent : )
lbrace : {
intsy : int
ident : code
semicolon : ;
scanfsy : scanf
lparent : (
ident : code
rparent : )
semicolon : ;
printfsy : printf
lparent : (
stringcon : \nStart the test!\n
rparent : )
semicolon : ;
switchsy : switch
lparent : (
ident : code
rparent : )
lbrace : {
casesy : case
intcon : 1
colon : :
lbrace : {
ident : test1func4
lparent : (
rparent : )
semicolon : ;
rbrace : }
casesy : case
intcon : 2
colon : :
lbrace : {
printfsy : printf
lparent : (
stringcon : Test2Func2 = 
comma : ,
ident : test2func2
lparent : (
charcon : a
rparent : )
rparent : )
semicolon : ;
rbrace : }
casesy : case
intcon : 3
colon : :
lbrace : {
ident : test3func1
lparent : (
intcon : 4
rparent : )
semicolon : ;
printfsy : printf
lparent : (
stringcon : Test3Fun3() = 
comma : ,
ident : test3func3
lparent : (
rparent : )
rparent : )
semicolon : ;
rbrace : }
casesy : case
intcon : 4
colon : :
lbrace : {
ident : test4func1
lparent : (
rparent : )
semicolon : ;
ident : test4func2
lparent : (
rparent : )
semicolon : ;
rbrace : }
casesy : case
intcon : 5
colon : :
lbrace : {
ident : test5func3
lparent : (
rparent : )
semicolon : ;
rbrace : }
rbrace : }
printfsy : printf
lparent : (
stringcon : \nEnd the test!\n
rparent : )
semicolon : ;
rbrace : }
