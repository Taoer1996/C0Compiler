constsy : const
intsy : int
ident : cst1_int
becomes : =
intcon : 4
semicolon : ;
constsy : const
charsy : char
ident : cst2_char
becomes : =
charcon : a
semicolon : ;
constsy : const
intsy : int
ident : cst3_int
becomes : =
sub : -
intcon : 1
comma : ,
ident : cst4_int
becomes : =
intcon : 1
semicolon : ;
constsy : const
charsy : char
ident : cst5_char
becomes : =
charcon : +
comma : ,
ident : cst6_char
becomes : =
charcon : /
semicolon : ;
intsy : int
ident : var1_int
semicolon : ;
intsy : int
ident : var2_int
comma : ,
ident : var3_int
lbrack : [
intcon : 2
rbrack : ]
semicolon : ;
charsy : char
ident : var4_char
semicolon : ;
charsy : char
ident : var5_char
comma : ,
ident : var6_char
lbrack : [
sub : -
intcon : 1
rbrack : ]
semicolon : ;
intsy : int
ident : funcint1
lparent : (
rparent : )
lbrace : {
constsy : const
intsy : int
ident : funcint1cst
becomes : =
intcon : 2
semicolon : ;
intsy : int
ident : funcint1var
semicolon : ;
returnsy : return
lparent : (
ident : funcint1cst
rparent : )
semicolon : ;
rbrace : }
intsy : int
ident : funcint2
lparent : (
intsy : int
ident : a
rparent : )
lbrace : {
constsy : const
intsy : int
ident : funcint2_cst1
becomes : =
intcon : 4
constsy : const
charsy : char
ident : funcint2_cst2
becomes : =
charcon : a
semicolon : ;
intsy : int
ident : _funcint2_var1
semicolon : ;
charsy : char
ident : _funcint2_var2
semicolon : ;
returnsy : return
lparent : (
ident : a
add : +
ident : cst1_int
rparent : )
semicolon : ;
rbrace : }
charsy : char
ident : funcchar
lparent : (
charsy : char
ident : ch
rparent : )
lbrace : {
returnsy : return
lparent : (
ident : ch
sub : -
charcon : A
add : +
charcon : a
rparent : )
semicolon : ;
rbrace : }
intsy : int
ident : factorial
lparent : (
intsy : int
ident : n
rparent : )
lbrace : {
ifsy : if
lparent : (
ident : n
eql : ==
intcon : 1
rparent : )
lbrace : {
returnsy : return
lparent : (
intcon : 1
rparent : )
semicolon : ;
rbrace : }
elsesy : else
lbrace : {
returnsy : return
lparent : (
ident : n
mul : *
ident : factorial
lparent : (
ident : n
sub : -
intcon : 1
rparent : )
rparent : )
semicolon : ;
rbrace : }
rbrace : }
voidsy : void
ident : funcvoid1
lparent : (
rparent : )
lbrace : {
semicolon : ;
rbrace : }
voidsy : void
ident : funcvoid2
lparent : (
intsy : int
ident : a
comma : ,
charsy : char
ident : ch
rparent : )
lbrace : {
constsy : const
intsy : int
ident : funcvoid2_cst1
becomes : =
intcon : 5
semicolon : ;
constsy : const
intsy : int
ident : funcvoid2_cst2
becomes : =
intcon : 6
semicolon : ;
constsy : const
intsy : int
ident : funcvoid2_cst3
becomes : =
intcon : 7
semicolon : ;
constsy : const
intsy : int
ident : funcvoid2_cst4
becomes : =
intcon : 8
semicolon : ;
printfsy : printf
lparent : (
ident : ch
rparent : )
semicolon : ;
rbrace : }
voidsy : void
mainsy : main
lparent : (
rparent : )
lbrace : {
constsy : const
intsy : int
ident : cst1
becomes : =
intcon : 9
comma : ,
ident : cst2
becomes : =
intcon : 0
semicolon : ;
constsy : const
charsy : char
ident : cst3
becomes : =
charcon : a
comma : ,
ident : cst4
becomes : =
charcon : A
semicolon : ;
intsy : int
ident : x
comma : ,
ident : y
comma : ,
ident : z
comma : ,
ident : n
lbrack : [
intcon : 2
rbrack : ]
semicolon : ;
intsy : int
ident : u
comma : ,
ident : v
comma : ,
ident : w
semicolon : ;
charsy : char
ident : s
lbrack : [
intcon : 3
rbrack : ]
semicolon : ;
scanfsy : scanf
lparent : (
ident : u
comma : ,
ident : v
rparent : )
semicolon : ;
switchsy : switch
lparent : (
ident : u
rparent : )
lbrace : {
casesy : case
intcon : 1
colon : :
ifsy : if
lparent : (
ident : v
gt : >
intcon : 0
rparent : )
lbrace : {
printfsy : printf
lparent : (
stringcon : print_string_only tested!\n
rparent : )
semicolon : ;
rbrace : }
elsesy : else
lbrace : {
printfsy : printf
lparent : (
stringcon : v = 
comma : ,
ident : v
rparent : )
semicolon : ;
printfsy : printf
lparent : (
stringcon : \nprint_expression_only tested!\n
rparent : )
semicolon : ;
printfsy : printf
lparent : (
stringcon : if_with_else tested!\n
rparent : )
semicolon : ;
rbrace : }
casesy : case
intcon : 2
colon : :
lbrace : {
ifsy : if
lparent : (
ident : v
lt : <
intcon : 0
rparent : )
lbrace : {
printfsy : printf
lparent : (
stringcon : \nif_without_else tested!\n
rparent : )
semicolon : ;
printfsy : printf
lparent : (
stringcon : print_string_and_expression tested and cst1=
comma : ,
ident : cst1
rparent : )
semicolon : ;
printfsy : printf
lparent : (
stringcon : \n
rparent : )
semicolon : ;
rbrace : }
rbrace : }
casesy : case
intcon : 3
colon : :
lbrace : {
ident : x
becomes : =
add : +
ident : cst1
semicolon : ;
ident : n
lbrack : [
intcon : 0
rbrack : ]
becomes : =
sub : -
ident : cst1
semicolon : ;
ident : y
becomes : =
sub : -
ident : cst1
add : +
ident : cst2
semicolon : ;
ident : s
lbrack : [
intcon : 0
rbrack : ]
becomes : =
ident : cst4
sub : -
ident : cst3
add : +
charcon : b
add : +
intcon : 1
semicolon : ;
ident : z
becomes : =
ident : u
add : +
lparent : (
ident : x
mul : *
ident : n
lbrack : [
intcon : 0
rbrack : ]
rparent : )
divi : /
ident : y
add : +
ident : funcint2
lparent : (
intcon : 5
rparent : )
add : +
ident : v
semicolon : ;
printfsy : printf
lparent : (
stringcon : \nx = 
comma : ,
ident : x
rparent : )
semicolon : ;
printfsy : printf
lparent : (
stringcon : \nn[0] = 
comma : ,
ident : n
lbrack : [
intcon : 0
rbrack : ]
rparent : )
semicolon : ;
printfsy : printf
lparent : (
stringcon : \ny = 
comma : ,
ident : y
rparent : )
semicolon : ;
printfsy : printf
lparent : (
stringcon : \ns[0] = 
comma : ,
ident : s
lbrack : [
intcon : 0
rbrack : ]
rparent : )
semicolon : ;
printfsy : printf
lparent : (
stringcon : \nz = 
comma : ,
ident : z
rparent : )
semicolon : ;
printfsy : printf
lparent : (
stringcon : \nassign_and_expression tested!\n
rparent : )
semicolon : ;
rbrace : }
casesy : case
intcon : 4
colon : :
lbrace : {
lbrace : {
semicolon : ;
rbrace : }
printfsy : printf
lparent : (
stringcon : null_statement tested!\n
rparent : )
semicolon : ;
rbrace : }
casesy : case
intcon : 5
colon : :
lbrace : {
ident : y
becomes : =
ident : funcint1
lparent : (
rparent : )
semicolon : ;
ident : x
becomes : =
intcon : 3
add : +
ident : y
semicolon : ;
whilesy : while
lparent : (
ident : x
gt : >
intcon : 0
rparent : )
lbrace : {
ifsy : if
lparent : (
ident : cst1
gt : >
intcon : 3
rparent : )
lbrace : {
printfsy : printf
lparent : (
stringcon : \nx = 
comma : ,
ident : x
rparent : )
semicolon : ;
rbrace : }
ident : x
becomes : =
ident : x
sub : -
intcon : 1
semicolon : ;
rbrace : }
printfsy : printf
lparent : (
stringcon : \nloop_statement tested!\n
rparent : )
semicolon : ;
rbrace : }
casesy : case
intcon : 6
colon : :
lbrace : {
ident : factorial
lparent : (
intcon : 4
rparent : )
semicolon : ;
ident : funcvoid2
lparent : (
intcon : 9
comma : ,
charcon : a
rparent : )
semicolon : ;
printfsy : printf
lparent : (
stringcon : \n 5! = 
comma : ,
ident : factorial
lparent : (
intcon : 5
rparent : )
rparent : )
semicolon : ;
printfsy : printf
lparent : (
stringcon : \nfunction_call_statement tested!\n
rparent : )
semicolon : ;
rbrace : }
casesy : case
intcon : 7
colon : :
lbrace : {
scanfsy : scanf
lparent : (
ident : w
rparent : )
semicolon : ;
scanfsy : scanf
lparent : (
ident : x
comma : ,
ident : y
rparent : )
semicolon : ;
printfsy : printf
lparent : (
stringcon : \nw=
comma : ,
ident : w
rparent : )
semicolon : ;
printfsy : printf
lparent : (
stringcon : \nx=
comma : ,
ident : x
rparent : )
semicolon : ;
printfsy : printf
lparent : (
stringcon : \ny=
comma : ,
ident : y
rparent : )
semicolon : ;
printfsy : printf
lparent : (
stringcon : \nread_statement tested!\n
rparent : )
semicolon : ;
rbrace : }
casesy : case
intcon : 8
colon : :
lbrace : {
returnsy : return
semicolon : ;
rbrace : }
casesy : case
intcon : 9
colon : :
lbrace : {
printfsy : printf
lparent : (
stringcon : \nthe lower B is 
comma : ,
ident : funcchar
lparent : (
charcon : B
rparent : )
rparent : )
semicolon : ;
rbrace : }
rbrace : }
whilesy : while
lparent : (
ident : u
lt : <
intcon : 3
rparent : )
lbrace : {
ident : u
becomes : =
ident : u
add : +
intcon : 1
semicolon : ;
printfsy : printf
lparent : (
stringcon : \nu is:
comma : ,
ident : u
rparent : )
semicolon : ;
printfsy : printf
lparent : (
stringcon : \n
rparent : )
semicolon : ;
rbrace : }
switchsy : switch
lparent : (
ident : v
sub : -
intcon : 1
rparent : )
lbrace : {
casesy : case
intcon : 0
colon : :
printfsy : printf
lparent : (
stringcon : \ncst1 = 
comma : ,
ident : cst1
rparent : )
semicolon : ;
defaultsy : default
colon : :
printfsy : printf
lparent : (
stringcon : \ndefault tested!\n
rparent : )
semicolon : ;
rbrace : }
rbrace : }
